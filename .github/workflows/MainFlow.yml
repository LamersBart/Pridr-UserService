name: Main Flow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore /UserService/UserService.csproj

      - name: Build solution
        run: dotnet build /UserService/UserService.csproj --no-restore --configuration Release

      - name: Run tests
        run: dotnet test /UserService/UserService.Tests.csproj --no-restore --logger "console;verbosity=detailed"
  scan:
    name: SonarQube scan
    needs: [build-and-test]
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"LamersBart_Pridr-UserService" /o:"lamersdev" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  qualitiy:
   name: Qualitiy gate check
   needs: [build-and-test, scan] 
   runs-on: ubuntu-22.04
   steps:
     - name: Quality Gate Check
       run: |
         RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
         "https://sonarcloud.io/api/qualitygates/project_status?projectKey=LamersBart_Pridr-UserService")
         echo "SonarCloud API Response: $RESPONSE"
         STATUS=$(echo $RESPONSE | jq -r .projectStatus.status)
         echo "Quality Gate Status: $STATUS"
         if [ "$STATUS" != "OK" ]; then
             echo "Quality Gate failed!"
             exit 1
         fi
  docker-image:
    name: Build and push docker image
    needs: [build-and-test, scan]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build the Docker image
        run: docker build ./UserService --file ./UserService/Dockerfile -t lamersbart/pridr-userservice:latest

      - name: push image to hub
        run: docker push lamersbart/pridr-userservice:latest
  integration-tests:
    name: Trigger Integration Tests
    needs: [build-and-test, scan, docker-image]
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: read
    steps:
      - name: Trigger Integration Tests Workflow
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        id: trigger-workflow
        run: |
          echo "Starten van de integration test workflow in repo Y..."
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/workflows/137682142/dispatches \
            -d '{"ref":"main"}'

          echo "Wachten op registratie van workflow run..."
          sleep 10

          response=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/runs?branch=main&per_page=1)
          
          run_id=$(echo "$response" | jq -r '.workflow_runs[0].id')
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Fout: Geen geldige workflow-run ID gevonden!"
            exit 1
          fi

          echo "Workflow-run ID is: $run_id"
          echo "run_id=$run_id" >> $GITHUB_ENV

      - name: Controleer geladen run_id
        run: |
          if [ -z "${{ env.run_id }}" ]; then
            echo "Fout: run_id is niet geladen!"
            exit 1
          else
            echo "run_id geladen: ${{ env.run_id }}"
          fi

      - name: Wait for Integration Test Completion
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          run_id: ${{ env.run_id }}
        run: |
          if [ -z "${{ env.run_id }}" ]; then
            echo "Fout: run_id is niet ingesteld!"
            exit 1
          fi

          echo "Controleren van workflow-run met ID: ${{ env.run_id }}..."

          # Functie om met een wachttijd te blijven checken
          check_workflow_status() {
            local attempts=0
            local max_attempts=30
            local delay=10

            while [ $attempts -lt $max_attempts ]; do
              echo "Poging $((attempts + 1)) van $max_attempts om de status op te halen..."

              response=$(curl -s \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer $PAT_TOKEN" \
                "https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/runs/${{ env.run_id }}")

              status=$(echo "$response" | jq -r '.status')
              conclusion=$(echo "$response" | jq -r '.conclusion')

              if [ "$status" = "completed" ]; then
                if [ "$conclusion" = "success" ]; then
                  echo "Workflow succesvol voltooid!"
                  return 0
                else
                  echo "Workflow mislukt met conclusie: $conclusion"
                  exit 1
                fi
              fi

              echo "Workflow nog bezig. Wachten $delay seconden..."
              sleep $delay
              attempts=$((attempts + 1))
            done

            echo "Workflow niet voltooid binnen de maximale wachttijd!"
            exit 1
          }

          # Start controle
          check_workflow_status