name: test

on:
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-22.04

    permissions:
      actions: write
      contents: read

    steps:
      - name: Trigger Integration Tests Workflow
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        id: trigger-workflow
        run: |
          echo "Starten van de integration test workflow in repo Y..."
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/workflows/137682142/dispatches \
            -d '{"ref":"main"}'

          echo "Wachten op registratie van workflow run..."
          sleep 10

          response=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/runs?branch=main&per_page=1)

          echo "API Response voor workflow-runs: $response"
          run_id=$(echo "$response" | jq -r '.workflow_runs[0].id')
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Fout: Geen geldige workflow-run ID gevonden!"
            exit 1
          fi

          echo "Workflow-run ID is: $run_id"
          echo "run_id=$run_id" >> $GITHUB_ENV

      - name: Controleer geladen run_id
        run: |
          if [ -z "${{ env.run_id }}" ]; then
            echo "Fout: run_id is niet geladen!"
            exit 1
          else
            echo "run_id geladen: ${{ env.run_id }}"
          fi

      - name: Wait for Integration Test Completion
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          run_id: ${{ env.run_id }}
        uses: actions/github-script@v6
        with:
          script: |
            const owner = 'LamersBart';
            const repo = 'Pridr-IntergrationTest';
            const runId = process.env.run_id;

            if (!runId) {
              core.setFailed('Fout: run_id is niet beschikbaar.');
              return;
            }

            console.log(`Controleren van de workflow-run met ID: ${runId}`);

            const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            let isCompleted = false;
            let attempts = 0;
            const maxAttempts = 30;

            while (!isCompleted && attempts < maxAttempts) {
              const result = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId,
              });

              const run = result.data;
              if (run.status === 'completed') {
                isCompleted = true;
                if (run.conclusion === 'success') {
                  console.log('Integration tests succesvol voltooid!');
                } else {
                  core.setFailed(`Integration tests gefaald: ${run.conclusion}`);
                }
              } else {
                console.log(`Workflow-run nog bezig. Wacht 10 seconden... (${attempts + 1}/${maxAttempts})`);
                await delay(10000);
                attempts++;
              }
            }

            if (!isCompleted) {
              core.setFailed('Workflow-run is niet voltooid binnen de maximale wachttijd.');
            }

