name: test

on:
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-22.04

    permissions:
      actions: write
      contents: read

    steps:
      - name: Trigger Integration Tests Workflow
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        id: trigger-workflow
        run: |
          # Start de workflow
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/workflows/137682142/dispatches \
            -d '{"ref":"main"}'

          echo "Response ontvangen: $response"
          
          # Wacht even zodat de run wordt geregistreerd
          sleep 5

          # Haal de laatste workflow-run op
          response=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            https://api.github.com/repos/LamersBart/Pridr-IntergrationTest/actions/runs?branch=main&per_page=1)

          echo "Recent workflow-run response: $response"

          # Extract de run_id van de nieuwste workflow-run
          run_id=$(echo "$response" | jq -r '.workflow_runs[0].id')
          if [ -z "$run_id" ]; then
            echo "Geen workflow-run ID gevonden!"
            exit 1
          fi

          echo "Workflow-run ID is: $run_id"
          echo "run_id=$run_id" >> $GITHUB_ENV

      - name: Wait for Integration Test Completion
        uses: actions/github-script@v6
        with:
          script: |
            const owner = 'LamersBart';
            const repo = 'Pridr-IntergrationTest';
            const runId = process.env.run_id; // Verkregen uit de vorige stap
            const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

            let isCompleted = false;
            let attempts = 0;
            const maxAttempts = 30;

            console.log(`Wachten op voltooiing van workflow-run met ID: ${runId}`);
            while (!isCompleted && attempts < maxAttempts) {
              try {
                const result = await github.rest.actions.getWorkflowRun({
                  owner,
                  repo,
                  run_id: runId,
                });

                const run = result.data;
                if (run.status === 'completed') {
                  isCompleted = true;
                  if (run.conclusion === 'success') {
                    console.log('Workflow succesvol voltooid!');
                  } else {
                    core.setFailed(`Workflow is voltooid maar mislukt: ${run.conclusion}`);
                  }
                } else {
                  console.log(`Workflow nog niet voltooid. Wacht 10 seconden... (Poging ${attempts + 1}/${maxAttempts})`);
                  await delay(10000);
                  attempts++;
                }
              } catch (error) {
                console.error(`Fout bij het ophalen van workflow-run: ${error.message}`);
                core.setFailed('Er is een fout opgetreden bij het controleren van de workflow-run.');
              }
            }

            if (!isCompleted) {
              core.setFailed('Workflow is niet voltooid binnen de maximale wachttijd.');
            }

